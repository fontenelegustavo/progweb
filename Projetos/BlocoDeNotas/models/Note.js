const mongoose = require('mongoose');

const noteSchema = new mongoose.Schema({
  title: {
    type: String,
    required: [true, 'T√≠tulo √© obrigat√≥rio'],
    trim: true,
    maxlength: [100, 'T√≠tulo n√£o pode ter mais de 100 caracteres'],
    minlength: [1, 'T√≠tulo n√£o pode estar vazio']
  },
  content: {
    type: String,
    required: [true, 'Conte√∫do √© obrigat√≥rio'],
    minlength: [1, 'Conte√∫do n√£o pode estar vazio']
  },
  category: {
    type: String,
    default: 'Geral',
    enum: {
      values: ['Geral', 'Trabalho', 'Pessoal', 'Estudos', 'Ideias', 'Importante'],
      message: 'Categoria deve ser uma das op√ß√µes v√°lidas'
    }
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
});

// Middleware para atualizar updatedAt antes de salvar
noteSchema.pre('save', function(next) {
  this.updatedAt = Date.now();
  next();
});

// M√©todo para obter resumo do conte√∫do
noteSchema.methods.getContentPreview = function(maxLength = 100) {
  if (this.content.length <= maxLength) {
    return this.content;
  }
  return this.content.substring(0, maxLength) + '...';
};

// M√©todo para obter √≠cone da categoria
noteSchema.methods.getCategoryIcon = function() {
  const icons = {
    'Geral': 'üìù',
    'Trabalho': 'üíº',
    'Pessoal': 'üë§',
    'Estudos': 'üìö',
    'Ideias': 'üí°',
    'Importante': '‚≠ê'
  };
  return icons[this.category] || 'üìù';
};

module.exports = mongoose.model('Note', noteSchema);
